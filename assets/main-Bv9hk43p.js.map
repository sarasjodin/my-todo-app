{"version":3,"file":"main-Bv9hk43p.js","sources":["../../src/services/TodoList.ts","../../src/ui/messages.ts","../../src/ui/renderTodos.ts","../../src/events/todoEvents.ts","../../src/app.ts"],"sourcesContent":["/**\n * @class TodoList\n *\n * // Class that manages a list of todos\n *\n * Class responsibilities:\n * - addTodo(): Validates and adds a new todo\n * - deleteTodo(): Deletes a todo from the list (no confirmation this version)\n * - toggleTodoCompleted(): Toggles todo as completed/unmarked\n * - getTodos(): Returns the current list of todos\n * - saveToLocalStorage(): Saves todos to browser storage\n * - loadFromLocalStorage(): Loads todos from browser storage\n */\n\nimport type { Todo } from '../models/Todo';\n\nexport class TodoList {\n  private todos: Todo[] = []; // Internal array storing all todo items\n\n  /**\n   * Load todos from LocalStorage when an instance is created\n   */\n  constructor() {\n    this.loadFromLocalStorage();\n  }\n\n  /**\n   * Attempts to add a new todo item to the list.\n   * Validates input values and checks for duplicate tasks before adding.\n   *\n   * @param task - The task description\n   * @param priority - A number from 1 to 3 (prio)\n   * @returns\n   *   - ok if the todo was added successfully\n   *   - invalid if priority not met\n   *   - duplicate if a todo with the same task already exists\n   */\n  addTodo(task: string, priority: number): 'ok' | 'invalid' | 'duplicate' {\n    const trimmedTask = task.trim();\n    if (!trimmedTask || priority < 1 || priority > 3) return 'invalid';\n\n    // Check if task exists\n    const exists = this.todos.some(\n      (todo) => todo.task.toLowerCase() === trimmedTask.toLowerCase()\n    );\n    if (exists) return 'duplicate';\n\n    // Create and add a new todo item with default completed = false\n    this.todos.push({\n      task: trimmedTask || 'Unnamed task',\n      priority,\n      completed: false,\n      createdAt: Date.now(), // Always ensure createdAt is set\n      completedAt: undefined // Use undefined if not completed\n    });\n\n    // Whole list is being saved\n    this.saveToLocalStorage();\n    return 'ok';\n  }\n\n  /**\n   * Deletes a todo from the list based on createdAt timestamp.\n   *\n   * @param {number} createdAt - The unique timestamp of the todo to delete\n   */\n  deleteTodo(createdAt: number): void {\n    const index = this.todos.findIndex((todo) => todo.createdAt === createdAt);\n    if (index !== -1) {\n      this.todos.splice(index, 1); // Remove the todo from the list\n      this.saveToLocalStorage(); // Save to LocalStorage\n    }\n  }\n\n  /**\n   * Toggles the completion state of a todo. If the todo is marked as completed,\n   * the completedAt timestamp is set; otherwise, it is removed.\n   *\n   * @param {number} createdAt - The unique timestamp of the todo to toggle.\n   * @returns {boolean | undefined} - Returns the updated completion state of the todo\n   *                               true if marked completed, false if unmarked or undefined if the todo was not found.\n   */\n  toggleTodoCompleted(createdAt: number): boolean | undefined {\n    const todo = this.todos.find((t) => t.createdAt === createdAt);\n    if (todo) {\n      todo.completed = !todo.completed;\n      todo.completedAt = todo.completed ? Date.now() : undefined;\n      // Whole list is being saved\n      this.saveToLocalStorage();\n      return todo.completed;\n    }\n    return undefined;\n  }\n\n  /**\n   * Updates the task description of a specific todo.\n   *\n   * @param {number} index - The index of the todo to update in the list.\n   * @param {string} newText - The new task description for the todo.\n   */\n  /*   updateTodoText(index: number, newText: string): void {\n    if (this.todos[index]) {\n      this.todos[index].task = newText;\n      this.saveToLocalStorage();\n    }\n  } */\n\n  /**\n   * Returns the full list of todos\n   * @returns An array of all todos\n   */\n  getTodos(): Todo[] {\n    return this.todos;\n  }\n\n  /**\n   * Saves the current todo list to the browser's LocalStorage\n   */\n  private saveToLocalStorage(): void {\n    localStorage.setItem('todos', JSON.stringify(this.todos));\n  }\n\n  /**\n   * Loads todos from LocalStorage if available,\n   * and replaces the current todo array\n   */\n  private loadFromLocalStorage(): void {\n    const data = localStorage.getItem('todos');\n    if (data) {\n      // Parse the JSON string back into a todo array\n      this.todos = JSON.parse(data);\n\n      // Check that all criterias exist\n      this.todos = this.todos.map((todo: any) => {\n        return {\n          task: todo.task || '', // Make sure there is a task\n          completed: todo.completed !== undefined ? todo.completed : false,\n          priority:\n            todo.priority >= 1 && todo.priority <= 3 ? todo.priority : 2,\n          createdAt: todo.createdAt || Date.now(), // If createdAt is missing, add actual time\n          completedAt: todo.completedAt || undefined // If completedAt is missing, add undefined\n        };\n      });\n    }\n  }\n}\n","/**\n * @file messages.ts\n *\n * This file contains functions for displaying messages to the user.\n * It includes functionality for showing error or success messages\n * based on the application's state and actions performed by the user.\n *\n * Responsibilities:\n * - Show success or error messages in the UI\n * - Automatically clear messages after a specified time\n */\n\n/**\n * Displays an error or success message to the user.\n * The message is shown in the respective `<p>` element for either success or error.\n * Both messages are cleared before showing the new message.\n *\n * @param {('error' | 'success')} type - The type of message to display. Can be either 'error' or 'success'.\n * @param {string} message - The message to display to the user.\n */\nexport function showMessage(type: 'error' | 'success', message: string) {\n  const errorMsg = document.getElementById('errorMsg') as HTMLParagraphElement;\n  const successMsg = document.getElementById(\n    'successMsg'\n  ) as HTMLParagraphElement;\n\n  // Clear both message areas before showing a new one\n  errorMsg.textContent = '';\n  successMsg.textContent = '';\n\n  // Show one or the other\n  if (type === 'error') {\n    errorMsg.textContent = message;\n  } else {\n    successMsg.textContent = message;\n  }\n\n  // Clear message after 4 seconds\n  setTimeout(() => {\n    errorMsg.textContent = '';\n    successMsg.textContent = '';\n  }, 4000);\n}\n\n/**\n * Displays a success or error message based on the completion state of a todo item.\n * This function is specifically used to show feedback after a todo is marked as completed or unmarked.\n *\n * @param {boolean | undefined} completed - The state of the todo item:\n *   - `true` indicates the todo was marked completed\n *   - `false` indicates the todo was \"unmarked\".\n *   - `undefined` in case the todo could not be toggled.\n */\nexport function showToggleMessage(completed: boolean | undefined) {\n  if (completed === true) {\n    showMessage('success', 'Well done, item marked as done!');\n  } else if (completed === false) {\n    showMessage('success', 'Todo item unmarked');\n  } else {\n    showMessage('error', 'Could not toggle todo');\n  }\n}\n","/**\n * @file renderTodos.ts\n *\n * This file contains the function responsible for rendering the todo items\n * to the DOM. It takes care of sorting the todo list, displaying todos,\n * and managing the layout of the list in the user interface.\n *\n * Responsibilities:\n * - Retrieves todos from the TodoList instance\n * - Sorts todos based on their completion status, priority, and creation time\n * - Renders each todo item to the DOM, including options to mark as completed or delete\n * - Displays an error message if no todos are available\n */\n\nimport { TodoList } from '../services/TodoList'; // Import the TodoList class to fetch the todos\nimport { showMessage } from './messages'; // Import the function to display messages to the user\n\n/**\n * Renders the current todos from the TodoList instance to the DOM.\n *\n * @param {TodoList} todoList - The instance of TodoList from which todos are fetched.\n * @function renderTodos\n */\nexport function renderTodos(todoList: TodoList) {\n  // Get the container where todos will be rendered\n  const container = document.querySelector('#todo-container') as HTMLElement;\n  // Clear the existing list\n  container.innerHTML = '';\n\n  // Get current todos from the class\n  const todos = todoList.getTodos();\n\n  // Show error message if no todos are found\n  if (todos.length === 0) {\n    showMessage('error', 'No items found yet');\n    return;\n  }\n\n  // Sort todos by completion status, priority, and creation date\n  const sortedTodos = todos.slice().sort((a, b) => {\n    // Sort by completion status (completed items at the bottom)\n    if (a.completed !== b.completed) return a.completed ? 1 : -1;\n\n    // Sort by priority priority 1, then 2, then 3)\n    if (a.priority !== b.priority) return a.priority - b.priority;\n\n    // Sort by creation date (newest first)\n    return a.createdAt - b.createdAt;\n  });\n\n  // Iterate over each sorted todo and render it to the DOM\n  sortedTodos.forEach((todo) => {\n    const item = document.createElement('div'); // Create a new div element for each todo\n    item.className = 'todo-item'; // Assign a class to the item for styling\n    item.dataset.createdat =\n      todo.createdAt?.toString() || Date.now().toString(); // Set the createdAt as a data attribute for identification\n\n    // Set the HTML content for each todo item\n    item.innerHTML = `\n      <input type=\"checkbox\" class=\"toggle-completed\" ${\n        todo.completed ? 'checked' : ''\n      }>\n    <span class=\"task-text\">${todo.task}</span>\n    <span class=\"dots\"></span>\n    <span class=\"priority\">| Prio ${todo.priority}</span>\n    <button class=\"delete-todo\">X</button>\n  `;\n\n    // Append the todo item to the \"todo-container\"\n    container.appendChild(item);\n  });\n}\n","/**\n * @file todoEvents.ts\n *\n * This file contains event listeners for managing user interactions with the todo list.\n * It handles form submissions, click events for marking todos as completed,\n * deleting todos, and displaying appropriate messages to the user.\n *\n * Responsibilities:\n * - Adds event listeners to form and todo list container\n * - Handles adding, deleting, and toggling todos based on user input\n * - Displays success and error messages based on actions\n */\n\nimport { TodoList } from '../services/TodoList'; // Import the TodoList class for manipulating todos\nimport { renderTodos } from '../ui/renderTodos'; // Import the function to render todos in the UI\nimport { showMessage, showToggleMessage } from '../ui/messages'; // Import functions for displaying messages\n\n/**\n * Initializes event listeners for form submission and interactions with the todo list.\n * - Handles form input for adding new todos.\n * - Handles clicks on todo items for deleting or toggling completion status.\n *\n * @param {TodoList} todoList - An instance of the TodoList class to manipulate todos.\n */\nexport function initEventListeners(todoList: TodoList) {\n  const form = document.getElementById('todoForm') as HTMLFormElement;\n  const taskInput = document.getElementById('taskInput') as HTMLInputElement;\n  const priorityInput = document.getElementById(\n    'priorityInput'\n  ) as HTMLSelectElement;\n\n  /**\n   * Handles form submission for adding a new todo\n   * Validates input, shows error if needed,\n   * and triggers list re-render if successful\n   */\n  form.addEventListener('submit', (e) => {\n    e.preventDefault();\n    const result = todoList.addTodo(taskInput.value, +priorityInput.value);\n\n    // Show feedback message based on the result of adding the todo\n    if (result === 'duplicate') {\n      showMessage('error', 'Todo item already exists');\n    } else if (result === 'invalid') {\n      showMessage('error', 'Add a valid task and priority');\n    } else {\n      showMessage('success', 'Todo item has been added');\n      taskInput.value = ''; // Clear input fields\n      priorityInput.value = '2'; // Reset priority to default\n      renderTodos(todoList); // Re-render the updated todo list\n    }\n  });\n\n  // Add event listener to handle clicks on todo items\n  document.querySelector('#todo-container')?.addEventListener('click', (e) => {\n    const target = e.target as HTMLElement;\n    const todoElement = target.closest('.todo-item') as HTMLElement;\n    if (!todoElement) return;\n\n    const createdAt = parseInt(todoElement.dataset.createdat!); // Get the unique ID of the todo\n\n    // Delete todo item when delete button is clicked\n    if (target.classList.contains('delete-todo')) {\n      showMessage('success', 'Todo item has been deleted');\n      todoList.deleteTodo(createdAt); // Delete the todo from the TodoList\n      renderTodos(todoList); // Re-render the updated todo list\n    }\n\n    // Toggle completion status when checkbox is clicked\n    if (target.classList.contains('toggle-completed')) {\n      const isCompleted = todoList.toggleTodoCompleted(createdAt); // Toggle the completion status of the todo\n      showToggleMessage(isCompleted); // Show success or error message based on the completion status\n      renderTodos(todoList); // Re-render the updated todo list\n    }\n  });\n}\n","/**\n * app.ts\n * This is the main application file that initializes the TodoList class and sets up\n * the necessary event listeners for user interactions with the todo list.\n *\n * Responsibilities:\n * - Initializes the TodoList instance\n * - Renders the current state of the todo list to the DOM\n * - Sets up event listeners for user input and interactions\n *\n * This file handles app initialization and connects logic with the UI.\n */\n\nimport { TodoList } from './services/TodoList'; // Import the class with actual logic\nimport { renderTodos } from './ui/renderTodos'; // Renders the todo list items\nimport { initEventListeners } from './events/todoEvents'; // Initializes event listeners for form\nimport './style.css'; // Import global styles\n\n// Initialize the todo list\nconst todoList = new TodoList();\n\n// Render todos and initialize event listeners\nrenderTodos(todoList); // Initial rendering when page loads\ninitEventListeners(todoList); // Initialize event listeners for user interactions\n"],"names":["TodoList","__publicField","task","priority","trimmedTask","todo","createdAt","index","t","data","showMessage","type","message","errorMsg","successMsg","showToggleMessage","completed","renderTodos","todoList","container","todos","a","b","item","_a","initEventListeners","form","taskInput","priorityInput","e","result","target","todoElement","isCompleted"],"mappings":"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"}